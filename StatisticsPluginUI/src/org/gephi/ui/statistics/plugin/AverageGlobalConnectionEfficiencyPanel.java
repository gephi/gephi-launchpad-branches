/*
 * Copyright 2008-2010 Gephi
 * Authors : Cezary Bartosiak
 * Website : http://www.gephi.org
 *
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.ui.statistics.plugin;

/**
 *
 *
 * @author Cezary Bartosiak
 */
public class AverageGlobalConnectionEfficiencyPanel extends javax.swing.JPanel {

    /** Creates new form AverageGlobalConnectionEfficiencyPanel */
    public AverageGlobalConnectionEfficiencyPanel() {
        initComponents();
    }

	public boolean isDirected() {
		return directedRadioButton.isSelected();
	}

	public void setDirected(boolean directed) {
		directedButtonGroup.setSelected(directed ? directedRadioButton.getModel() : undirectedRadioButton.getModel(), true);
	}

	public String getMstype() {
		if (randomRadioButton.isSelected())
			return "Random";
		if (randomRandomRadioButton.isSelected())
			return "RandomRandom";
		return "Random";
	}

	public void setMstype(String mstype) {
		if (mstype.equals("Random"))
			randomRadioButton.setSelected(true);
		else if (mstype.equals("RandomRandom"))
			randomRandomRadioButton.setSelected(true);
		else randomRadioButton.setSelected(true);
	}

	public int getSamplesCount() {
		return Integer.parseInt(samplesCountFormattedTextField.getText());
	}

	public void setSamplesCount(int samplesCount) {
		samplesCountFormattedTextField.setText(samplesCount + "");
	}

	public int getK() {
		return Integer.parseInt(kFormattedTextField.getText());
	}

	public void setK(int k) {
		kFormattedTextField.setText(k + "");
	}

	public boolean isExactlyK() {
		return exactlyKCheckBox.isSelected();
	}

	public void setExactlyK(boolean exactlyK) {
		exactlyKCheckBox.setSelected(exactlyK);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        directedButtonGroup = new javax.swing.ButtonGroup();
        buttonGroup = new javax.swing.ButtonGroup();
        header = new org.jdesktop.swingx.JXHeader();
        undirectedRadioButton = new javax.swing.JRadioButton();
        directedRadioButton = new javax.swing.JRadioButton();
        kFormattedTextField = new javax.swing.JFormattedTextField();
        randomRandomRadioButton = new javax.swing.JRadioButton();
        exactlyKCheckBox = new javax.swing.JCheckBox();
        kLabel = new javax.swing.JLabel();
        randomRadioButton = new javax.swing.JRadioButton();
        samplesCountFormattedTextField = new javax.swing.JFormattedTextField();
        samplesCountLabel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(419, 265));

        header.setDescription(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.header.description")); // NOI18N
        header.setTitle(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.header.title")); // NOI18N

        directedButtonGroup.add(undirectedRadioButton);
        undirectedRadioButton.setText(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.undirectedRadioButton.text")); // NOI18N

        directedButtonGroup.add(directedRadioButton);
        directedRadioButton.setText(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.directedRadioButton.text")); // NOI18N

        buttonGroup.add(randomRandomRadioButton);
        randomRandomRadioButton.setText(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.randomRandomRadioButton.text")); // NOI18N
        randomRandomRadioButton.setActionCommand(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.randomRandomRadioButton.actionCommand")); // NOI18N

        exactlyKCheckBox.setSelected(true);
        exactlyKCheckBox.setText(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.exactlyKCheckBox.text")); // NOI18N

        kLabel.setText(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.kLabel.text")); // NOI18N

        buttonGroup.add(randomRadioButton);
        randomRadioButton.setText(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.randomRadioButton.text")); // NOI18N

        samplesCountLabel.setText(org.openide.util.NbBundle.getMessage(AverageGlobalConnectionEfficiencyPanel.class, "AverageGlobalConnectionEfficiencyPanel.samplesCountLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(samplesCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(samplesCountFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(randomRadioButton)
                    .addComponent(randomRandomRadioButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(kLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exactlyKCheckBox))
                    .addComponent(undirectedRadioButton)
                    .addComponent(directedRadioButton))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(directedRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(undirectedRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(samplesCountLabel)
                    .addComponent(samplesCountFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exactlyKCheckBox)
                    .addComponent(kFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(randomRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomRandomRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.ButtonGroup directedButtonGroup;
    protected javax.swing.JRadioButton directedRadioButton;
    private javax.swing.JCheckBox exactlyKCheckBox;
    private org.jdesktop.swingx.JXHeader header;
    private javax.swing.JFormattedTextField kFormattedTextField;
    private javax.swing.JLabel kLabel;
    protected javax.swing.JRadioButton randomRadioButton;
    protected javax.swing.JRadioButton randomRandomRadioButton;
    private javax.swing.JFormattedTextField samplesCountFormattedTextField;
    private javax.swing.JLabel samplesCountLabel;
    protected javax.swing.JRadioButton undirectedRadioButton;
    // End of variables declaration//GEN-END:variables

}
