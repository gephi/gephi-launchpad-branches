/*
 * Copyright 2008-2010 Gephi
 * Authors : Cezary Bartosiak
 * Website : http://www.gephi.org
 *
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.ui.statistics.plugin;

import java.awt.Dimension;
import java.util.Date;
import javax.swing.JPanel;
import javax.xml.datatype.DatatypeConfigurationException;
import org.gephi.data.attributes.api.Estimator;
import org.gephi.data.attributes.type.TimeInterval;
import org.gephi.dynamic.DynamicUtilities;
import org.openide.util.Exceptions;

/**
 * A base class for all dynamic panels.
 *
 * @author Cezary Bartosiak
 */
public class DynamicPanel extends javax.swing.JPanel {
	/** Creates new form DynamicPanel */
	public DynamicPanel() {
		initComponents();
	}

	public TimeInterval getTimeInterval() {
		try {
			return new TimeInterval(
				DynamicUtilities.getDoubleFromXMLDateString(beginTimeInterval.getText()),
				DynamicUtilities.getDoubleFromXMLDateString(endTimeInterval.getText())
			);
		}
		catch (DatatypeConfigurationException ex) {
			Exceptions.printStackTrace(ex);
			return new TimeInterval(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
		}
	}

	public double getWindow() {
		switch (windowComboBox.getSelectedIndex()) {
			case 0: // Years
				return 365.0 * 24.0 * 60.0 * 60.0 * 1000.0;
			default:
				return 365.0 * 24.0 * 60.0 * 60.0 * 1000.0;
		}
	}

	public Estimator getEstimator() {
		switch (estimatorComboBox.getSelectedIndex()) {
			case 0: // FIRST
				return Estimator.FIRST;
			case 1: // LAST
				return Estimator.LAST;
			case 2: // MEDIAN
				return Estimator.MEDIAN;
			case 3: // MODE
				return Estimator.MODE;
			default:
				return Estimator.FIRST;
		}
	}

	public void setTimeInterval(TimeInterval timeInterval) {
		try {
			beginTimeInterval.setValue(DynamicUtilities.getXMLDateStringFromDouble(timeInterval.getLow()).
					substring(0, 10));
			endTimeInterval.setValue(DynamicUtilities.getXMLDateStringFromDouble(timeInterval.getHigh()).
					substring(0, 10));
		}
		catch (DatatypeConfigurationException ex) {
			Exceptions.printStackTrace(ex);
		}
		catch (IllegalArgumentException ex) {
			Date date = new Date();
			beginTimeInterval.setValue(date);
			endTimeInterval.setValue(date);
		}
	}

	public void setWindow(double window) {
		double yearLow  = 365.0 * 24.0 * 60.0 * 60.0 * 1000.0 - 0.001;
		double yearHigh = 365.0 * 24.0 * 60.0 * 60.0 * 1000.0 + 0.001;
		if (window >= yearLow && window <= yearHigh)
			windowComboBox.setSelectedIndex(0);
		else windowComboBox.setSelectedIndex(0);
	}

	public void setEstimator(Estimator estimator) {
		switch (estimator) {
			case FIRST:
				estimatorComboBox.setSelectedIndex(0);
			case LAST:
				estimatorComboBox.setSelectedIndex(1);
			case MEDIAN:
				estimatorComboBox.setSelectedIndex(2);
			case MODE:
				estimatorComboBox.setSelectedIndex(3);
			default:
				estimatorComboBox.setSelectedIndex(0);
		}
	}

	protected void setContent(JPanel panel, int height) {
		javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
		content.setLayout(contentLayout);
		contentLayout.setHorizontalGroup(
			contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
				Short.MAX_VALUE)
		);
		contentLayout.setVerticalGroup(
			contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addComponent(panel, height, height, height)
		);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        timeIntervalLabel = new javax.swing.JLabel();
        windowLabel = new javax.swing.JLabel();
        beginTimeInterval = new javax.swing.JFormattedTextField();
        separatorTimeInterval = new javax.swing.JLabel();
        endTimeInterval = new javax.swing.JFormattedTextField();
        windowComboBox = new javax.swing.JComboBox();
        estimatorComboBox = new javax.swing.JComboBox();
        estimatorLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        content = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setPreferredSize(new java.awt.Dimension(419, 300));

        timeIntervalLabel.setText(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.timeIntervalLabel.text")); // NOI18N

        windowLabel.setText(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.windowLabel.text")); // NOI18N

        beginTimeInterval.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        beginTimeInterval.setText(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.beginTimeInterval.text")); // NOI18N

        separatorTimeInterval.setText(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.separatorTimeInterval.text")); // NOI18N

        endTimeInterval.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        endTimeInterval.setText(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.endTimeInterval.text")); // NOI18N

        windowComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Years" }));

        estimatorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FIRST", "LAST", "MEDIAN", "MODE", " " }));

        estimatorLabel.setText(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.estimatorLabel.text")); // NOI18N

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 429, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeIntervalLabel)
                            .addComponent(windowLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(windowComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(beginTimeInterval, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(separatorTimeInterval)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endTimeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(207, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(estimatorLabel)
                            .addComponent(estimatorComboBox, 0, 110, Short.MAX_VALUE))
                        .addGap(309, 309, 309))))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeIntervalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beginTimeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorTimeInterval)
                    .addComponent(endTimeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(windowLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(windowComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estimatorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estimatorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        timeIntervalLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.timeIntervalLabel.AccessibleContext.accessibleName")); // NOI18N
        windowLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.windowLabel.AccessibleContext.accessibleName")); // NOI18N
        separatorTimeInterval.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.jLabel1.AccessibleContext.accessibleName")); // NOI18N
        estimatorLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DynamicPanel.class, "DynamicPanel.estimatorLabel.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField beginTimeInterval;
    protected javax.swing.JPanel content;
    private javax.swing.JFormattedTextField endTimeInterval;
    private javax.swing.JComboBox estimatorComboBox;
    private javax.swing.JLabel estimatorLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel separatorTimeInterval;
    private javax.swing.JLabel timeIntervalLabel;
    private javax.swing.JComboBox windowComboBox;
    private javax.swing.JLabel windowLabel;
    // End of variables declaration//GEN-END:variables
}
