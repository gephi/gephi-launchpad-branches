/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.desktop.similarity;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.project.api.ProjectController;
import org.gephi.project.api.Workspace;
import org.gephi.project.api.WorkspaceListener;
import org.gephi.similarity.api.SimilarityController;
import org.gephi.similarity.api.SimilarityModel;
import org.gephi.ui.utils.UIUtils;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.gephi.desktop.similarity//Similarity//EN",
					 autostore = false)
public final class SimilarityTopComponent extends TopComponent implements ChangeListener {
	private static SimilarityTopComponent instance;
	/** path to the icon used by the component and its open action */
	static final String ICON_PATH = "org/gephi/desktop/similarity/resources/icon.png";
	private static final String PREFERRED_ID = "SimilarityTopComponent";

	private SimilarityModel model;

	public SimilarityTopComponent() {
		initComponents();
		initDesign();
		setName(NbBundle.getMessage(SimilarityTopComponent.class, "CTL_SimilarityTopComponent"));
		// setToolTipText(NbBundle.getMessage(SimilarityTopComponent.class, "HINT_SimilarityTopComponent"));
		setIcon(ImageUtilities.loadImage(ICON_PATH, true));
		putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

		// Workspace events
		final SimilarityController sc = Lookup.getDefault().lookup(SimilarityController.class);
		ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
		pc.addWorkspaceListener(new WorkspaceListener() {
			@Override
			public void initialize(Workspace workspace) {

			}

			@Override
			public void select(Workspace workspace) {
				SimilarityModel m = sc.getModel();
				refreshModel(m);
			}

			@Override
			public void unselect(Workspace workspace) {
				
			}

			@Override
			public void close(Workspace workspace) {
				
			}

			@Override
			public void disable() {
				refreshModel(null);
			}
		});

		if (pc.getCurrentWorkspace() != null) {
			SimilarityModel m = sc.getModel();
			refreshModel(m);
		}
		else refreshModel(null);

		// Settings
		settingsButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				AvailableSimilaritiesChooser chooser = new AvailableSimilaritiesChooser();
				chooser.setup(model, ((SimilarityPanel)similarityPanel).getCategories());
				DialogDescriptor dd = new DialogDescriptor(chooser, NbBundle.getMessage(SimilarityTopComponent.class, "AvailableSimilaritiesChooser.title"));
				if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION))
					chooser.unsetup();
			}
		});
	}

	private void refreshModel(SimilarityModel model) {
		if (model != null && model != this.model) {
			if (this.model != null)
				this.model.removeChangeListener(this);
			model.addChangeListener(this);
		}
		this.model = model;
		refreshEnable(model != null);
		((SimilarityPanel)similarityPanel).refreshModel(model);
	}

	private void refreshEnable(boolean enable) {
		similarityPanel.setEnabled(enable);
		toolbar.setEnabled(enable);
		settingsButton.setEnabled(enable);
	}

	private void initDesign() {
		Border b = (Border)UIManager.get("Nb.Editor.Toolbar.border"); //NOI18N
		toolbar.setBorder(b);
		if (UIUtils.isAquaLookAndFeel())
			toolbar.setBackground(UIManager.getColor("NbExplorerView.background"));
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        toolbar = new javax.swing.JToolBar();
        settingsButton = new javax.swing.JButton();
        similarityPanel = new SimilarityPanel();

        setMinimumSize(new java.awt.Dimension(47, 23));
        setPreferredSize(new java.awt.Dimension(47, 23));
        setLayout(new java.awt.GridBagLayout());

        toolbar.setFloatable(false);
        toolbar.setRollover(true);
        toolbar.setAlignmentY(0.47619048F);
        toolbar.setMaximumSize(new java.awt.Dimension(47, 23));
        toolbar.setMinimumSize(new java.awt.Dimension(47, 23));

        org.openide.awt.Mnemonics.setLocalizedText(settingsButton, org.openide.util.NbBundle.getMessage(SimilarityTopComponent.class, "SimilarityTopComponent.settingsButton.text")); // NOI18N
        settingsButton.setFocusable(false);
        settingsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        settingsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(settingsButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(toolbar, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(similarityPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

	    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton settingsButton;
    private javax.swing.JPanel similarityPanel;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
	/**
	 * Gets default instance. Do not use directly: reserved for *.settings files only,
	 * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
	 * To obtain the singleton instance, use {@link #findInstance}.
	 */
	public static synchronized SimilarityTopComponent getDefault() {
		if (instance == null) {
			instance = new SimilarityTopComponent();
		}
		return instance;
	}

	/**
	 * Obtain the SimilarityTopComponent instance. Never call {@link #getDefault} directly!
	 */
	public static synchronized SimilarityTopComponent findInstance() {
		TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
		if (win == null) {
			Logger.getLogger(SimilarityTopComponent.class.getName()).warning(
					"Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
			return getDefault();
		}
		if (win instanceof SimilarityTopComponent) {
			return (SimilarityTopComponent)win;
		}
		Logger.getLogger(SimilarityTopComponent.class.getName()).warning(
				"There seem to be multiple components with the '" + PREFERRED_ID
				+ "' ID. That is a potential source of errors and unexpected behavior.");
		return getDefault();
	}

	@Override
	public int getPersistenceType() {
		return TopComponent.PERSISTENCE_ALWAYS;
	}

	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	Object readProperties(java.util.Properties p) {
		if (instance == null) {
			instance = this;
		}
		instance.readPropertiesImpl(p);
		return instance;
	}

	private void readPropertiesImpl(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	protected String preferredID() {
		return PREFERRED_ID;
	}

	@Override
	public void stateChanged(ChangeEvent e) {
		refreshModel(model);
	}
}
