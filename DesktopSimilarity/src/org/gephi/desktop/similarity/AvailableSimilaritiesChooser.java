/*
 * Copyright 2008-2010 Gephi
 * Authors : Cezary Bartosiak
 * Website : http://www.gephi.org
 *
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.desktop.similarity;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import net.miginfocom.swing.MigLayout;
import org.gephi.similarity.api.SimilarityController;
import org.gephi.similarity.api.SimilarityModel;
import org.gephi.similarity.spi.SimilarityUI;
import org.gephi.ui.components.JSqueezeBoxPanel;
import org.openide.util.Lookup;

/**
 *
 *
 * @author Cezary Bartosiak
 */
public class AvailableSimilaritiesChooser extends javax.swing.JPanel {
	private final JSqueezeBoxPanel squeezeBoxPanel = new JSqueezeBoxPanel();
	private final Map<JCheckBox, SimilarityUI> uiMap = new HashMap<JCheckBox, SimilarityUI>();

	/** Creates new form AvailableSimilaritiesChooser */
	public AvailableSimilaritiesChooser() {
		initComponents();
		methodsPanel.add(squeezeBoxPanel, BorderLayout.CENTER);
	}

	public void setup(SimilarityModel model, SimilarityCategory[] categories) {
		// Sort categories by position
		Arrays.sort(categories, new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				Integer p1 = ((SimilarityCategory)o1).getPosition();
				Integer p2 = ((SimilarityCategory)o2).getPosition();
				return p1.compareTo(p2);
			}
		});

		// Get UI
		SimilarityUI[] similarityUIs = Lookup.getDefault().lookupAll(SimilarityUI.class).toArray(new SimilarityUI[0]);

		for (SimilarityCategory category : categories ) {
			MigLayout migLayout = new MigLayout("insets 0 0 0 0");
			migLayout.setColumnConstraints("[grow,fill]");
			migLayout.setRowConstraints("[min!]");
			JPanel innerPanel = new JPanel(migLayout);

			// Find uis in this category
			List<SimilarityUI> uis = new ArrayList<SimilarityUI>();
			for(SimilarityUI sui : similarityUIs)
				if (sui.getCategory().equals(category.getName()))
					uis.add(sui);

			// Sort it by position
			Collections.sort(uis, new Comparator() {
				@Override
				public int compare(Object o1, Object o2) {
					Integer p1 = ((SimilarityUI)o1).getPosition();
					Integer p2 = ((SimilarityUI)o2).getPosition();
					return p1.compareTo(p2);
				}
			});

			for (SimilarityUI sui : uis) {
				JCheckBox checkBox = new JCheckBox(sui.getDisplayName());
				checkBox.setOpaque(false);
				checkBox.setSelected(model.isSimilarityUIVisible(sui));
				uiMap.put(checkBox, sui);
				innerPanel.add(checkBox, "wrap");
			}

			if(uis.size()>0)
				squeezeBoxPanel.addPanel(innerPanel, category.getName());
		}
	}

	public void unsetup() {
		// Only called when OK
		SimilarityController controller = Lookup.getDefault().lookup(SimilarityController.class);

		for (Map.Entry<JCheckBox, SimilarityUI> entry : uiMap.entrySet())
			controller.setSimilarityUIVisible(entry.getValue(), entry.getKey().isSelected());
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        methodsPanel = new javax.swing.JPanel();

        methodsPanel.setLayout(new java.awt.BorderLayout());

        methodsPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(methodsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(methodsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(methodsPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel methodsPanel;
    // End of variables declaration//GEN-END:variables

}
