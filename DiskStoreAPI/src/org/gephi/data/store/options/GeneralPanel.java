/*
Copyright 2008-2011 Gephi
Authors : Ernesto Aneiros
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.data.store.options;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.data.store.attributes.AttributeStore;
import org.openide.util.NbPreferences;
import static org.gephi.data.store.attributes.AttributeStore.*;

final class GeneralPanel extends javax.swing.JPanel {

    private final GeneralOptionsPanelController controller;

    GeneralPanel(GeneralOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        cacheEnabledChkBox.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                cacheMsgLabel.setEnabled(cacheEnabledChkBox.isSelected());
                cachePercentSlider.setEnabled(cacheEnabledChkBox.isSelected());
                cachePercentLabel.setEnabled(cacheEnabledChkBox.isSelected());        
            }
        });
        
        cachePercentSlider.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                cachePercentLabel.setText(cachePercentSlider.getValue() + "%");
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cacheEnabledChkBox = new javax.swing.JCheckBox();
        cacheMsgLabel = new javax.swing.JLabel();
        cachePercentSlider = new javax.swing.JSlider();
        cachePercentLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(cacheEnabledChkBox, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.cacheEnabledChkBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cacheMsgLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.cacheMsgLabel.text")); // NOI18N
        cacheMsgLabel.setEnabled(false);

        cachePercentSlider.setMinimum(5);
        cachePercentSlider.setMinorTickSpacing(5);
        cachePercentSlider.setPaintTicks(true);
        cachePercentSlider.setSnapToTicks(true);
        cachePercentSlider.setValue(30);
        cachePercentSlider.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(cachePercentLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.cachePercentLabel.text")); // NOI18N
        cachePercentLabel.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cacheMsgLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cachePercentSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(cachePercentLabel))
                    .addComponent(cacheEnabledChkBox))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cacheEnabledChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cachePercentSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cacheMsgLabel)
                    .addComponent(cachePercentLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cacheMsgLabel, cachePercentLabel, cachePercentSlider});

    }// </editor-fold>//GEN-END:initComponents

    void load() {
        // Example:        
        // someCheckBox.setSelected(NbPreferences.forModule(GeneralPanel.class).getBoolean("someFlag", false));
        boolean diskStoreEnabled = NbPreferences.forModule(AttributeStore.class).getBoolean(CACHE_ENABLED, false);
        int cachePercent = NbPreferences.forModule(AttributeStore.class).getInt(CACHE_SIZE_PERCENT, 30);
        cacheEnabledChkBox.setSelected(diskStoreEnabled);
        cachePercentSlider.setValue(cachePercent);
        cachePercentLabel.setText(cachePercent + "%");
    }

    void store() {
        // Example:
        // NbPreferences.forModule(GeneralPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        boolean diskStoreEnabled = cacheEnabledChkBox.isSelected();
        int cachePercent = cachePercentSlider.getValue();
        NbPreferences.forModule(AttributeStore.class).putBoolean(CACHE_ENABLED, diskStoreEnabled);
        NbPreferences.forModule(AttributeStore.class).putInt(CACHE_SIZE_PERCENT, cachePercent);
    }

    boolean valid() {
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cacheEnabledChkBox;
    private javax.swing.JLabel cacheMsgLabel;
    private javax.swing.JLabel cachePercentLabel;
    private javax.swing.JSlider cachePercentSlider;
    // End of variables declaration//GEN-END:variables
}
