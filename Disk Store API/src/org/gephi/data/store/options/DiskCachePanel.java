/*
Copyright 2008-2011 Gephi
Authors : Ernesto Aneiros
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.data.store.options;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.NbPreferences;

final class DiskCachePanel extends javax.swing.JPanel {

    private final DiskCacheOptionsPanelController controller;

    DiskCachePanel(DiskCacheOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        cacheEnabledChkBox.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                cacheSizeLabel.setEnabled(cacheEnabledChkBox.isSelected());
                percentSlider.setEnabled(cacheEnabledChkBox.isSelected());
                percentLabel.setEnabled(cacheEnabledChkBox.isSelected());        
            }
        });
        
        percentSlider.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                percentLabel.setText(percentSlider.getValue() + "%");
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cacheEnabledChkBox = new javax.swing.JCheckBox();
        percentSlider = new javax.swing.JSlider();
        cacheSizeLabel = new javax.swing.JLabel();
        percentLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(cacheEnabledChkBox, org.openide.util.NbBundle.getMessage(DiskCachePanel.class, "DiskCachePanel.cacheEnabledChkBox.text")); // NOI18N
        cacheEnabledChkBox.setNextFocusableComponent(percentSlider);
        cacheEnabledChkBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                changeListener(evt);
            }
        });

        percentSlider.setPaintTicks(true);
        percentSlider.setValue(40);
        percentSlider.setAlignmentX(0.0F);
        percentSlider.setEnabled(false);
        percentSlider.setNextFocusableComponent(this);

        org.openide.awt.Mnemonics.setLocalizedText(cacheSizeLabel, org.openide.util.NbBundle.getMessage(DiskCachePanel.class, "DiskCachePanel.cacheSizeLabel.text")); // NOI18N
        cacheSizeLabel.setEnabled(false);
        cacheSizeLabel.setInheritsPopupMenu(false);

        org.openide.awt.Mnemonics.setLocalizedText(percentLabel, org.openide.util.NbBundle.getMessage(DiskCachePanel.class, "DiskCachePanel.percentLabel.text")); // NOI18N
        percentLabel.setEnabled(false);
        percentLabel.setInheritsPopupMenu(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cacheSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(percentSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(percentLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(cacheEnabledChkBox)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cacheEnabledChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(percentSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cacheSizeLabel)
                    .addComponent(percentLabel))
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void changeListener(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_changeListener
        
    }//GEN-LAST:event_changeListener

    void load() {
        // Example:        
        // someCheckBox.setSelected(NbPreferences.forModule(DiskCachePanel.class).getBoolean("someFlag", false));
        
        boolean diskStoreEnabled = NbPreferences.forModule(DiskCachePanel.class).getBoolean("diskStoreEnabled", false);
        int cachePercent = NbPreferences.forModule(DiskCachePanel.class).getInt("cacheSizePercent", 40);
        
        cacheEnabledChkBox.setSelected(diskStoreEnabled);
        percentSlider.setValue(cachePercent);
        percentLabel.setText(cachePercent + "%");
    }

    void store() {
        // Example:
        // NbPreferences.forModule(DiskCachePanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        
        boolean diskStoreEnabled = cacheEnabledChkBox.isSelected();
        int cachePercent = percentSlider.getValue();
        
        NbPreferences.forModule(DiskCachePanel.class).putBoolean("diskStoreEnabled", diskStoreEnabled);
        NbPreferences.forModule(DiskCachePanel.class).putInt("cacheSizePercent", cachePercent);
    }

    boolean valid() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cacheEnabledChkBox;
    private javax.swing.JLabel cacheSizeLabel;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JSlider percentSlider;
    // End of variables declaration//GEN-END:variables
}
