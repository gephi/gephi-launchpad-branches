/*
 * Copyright 2008-2010 Gephi
 * Authors : Cezary Bartosiak
 * Website : http://www.gephi.org
 *
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.ui.complexgenerator.plugin;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import org.gephi.lib.validation.PositiveNumberValidator;
import org.netbeans.validation.api.Problems;
import org.netbeans.validation.api.Validator;
import org.netbeans.validation.api.builtin.Validators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.netbeans.validation.api.ui.ValidationPanel;

/**
 *
 *
 * @author Cezary Bartosiak
 */
public class MultiBarabasiAlbertPanel extends javax.swing.JPanel {
	private Map<Integer, Integer> Mmap = new HashMap<Integer, Integer>();

    /** Creates new form MultiBarabasiAlbertPanel */
    public MultiBarabasiAlbertPanel() {
        initComponents();
    }

	public Map<Integer, Integer> getMmap() {
		String[] pairs = MField.getText().split(",");
		for (int i = 0; i < pairs.length; ++i) {
			String[] pair = pairs[i].split(":");
			Integer key = Integer.parseInt(pair[0]);
			Integer value = Integer.parseInt(pair[1]);
			Mmap.put(key, value);
		}
		return Mmap;
	}

	public void setMmap(Map<Integer, Integer> Mmap) {
		this.Mmap = Mmap;
		StringBuilder sb = new StringBuilder();
		for (Entry<Integer, Integer> entry : Mmap.entrySet())
			sb.append(entry.getKey() + ":" + entry.getValue() + ",");
		if (sb.length() > 0)
			MField.setText(sb.substring(0, sb.length() - 1));
	}

	public static ValidationPanel createValidationPanel(MultiBarabasiAlbertPanel innerPanel) {
		ValidationPanel validationPanel = new ValidationPanel();
		if (innerPanel == null)
			innerPanel = new MultiBarabasiAlbertPanel();
		validationPanel.setInnerComponent(innerPanel);

		ValidationGroup group = validationPanel.getValidationGroup();

		group.add(innerPanel.NField, Validators.REQUIRE_NON_EMPTY_STRING,
				new PositiveNumberValidator());
		group.add(innerPanel.m0Field, Validators.REQUIRE_NON_EMPTY_STRING,
				new PositiveNumberValidator());
		group.add(innerPanel.m0Field, Validators.REQUIRE_NON_EMPTY_STRING,
				new m0Validator(innerPanel));

		return validationPanel;
	}

	private static class m0Validator implements Validator<String> {
		private MultiBarabasiAlbertPanel innerPanel;

		public m0Validator(MultiBarabasiAlbertPanel innerPanel) {
			this.innerPanel = innerPanel;
		}

		@Override
		public boolean validate(Problems problems, String compName, String model) {
			boolean result = false;

			try {
				Integer N  = Integer.parseInt(innerPanel.NField.getText());
				Integer m0 = Integer.parseInt(innerPanel.m0Field.getText());
				result = m0 < N;
			}
			catch (Exception e) { }
			if (!result) {
				String message = "<html>m0 &lt; N</html>";
				problems.add(message);
			}

			return result;
		}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NLabel = new javax.swing.JLabel();
        m0Field = new javax.swing.JTextField();
        NField = new javax.swing.JTextField();
        m0Label = new javax.swing.JLabel();
        constraintsLabel = new javax.swing.JLabel();
        MLabel = new javax.swing.JLabel();
        MField = new javax.swing.JTextField();

        NLabel.setText(org.openide.util.NbBundle.getMessage(MultiBarabasiAlbertPanel.class, "MultiBarabasiAlbertPanel.NLabel.text")); // NOI18N

        m0Field.setText(org.openide.util.NbBundle.getMessage(MultiBarabasiAlbertPanel.class, "MultiBarabasiAlbertPanel.m0Field.text")); // NOI18N

        NField.setText(org.openide.util.NbBundle.getMessage(MultiBarabasiAlbertPanel.class, "MultiBarabasiAlbertPanel.NField.text")); // NOI18N

        m0Label.setText(org.openide.util.NbBundle.getMessage(MultiBarabasiAlbertPanel.class, "MultiBarabasiAlbertPanel.m0Label.text")); // NOI18N

        constraintsLabel.setText(org.openide.util.NbBundle.getMessage(MultiBarabasiAlbertPanel.class, "MultiBarabasiAlbertPanel.constraintsLabel.text")); // NOI18N

        MLabel.setText(org.openide.util.NbBundle.getMessage(MultiBarabasiAlbertPanel.class, "MultiBarabasiAlbertPanel.MLabel.text")); // NOI18N

        MField.setText(org.openide.util.NbBundle.getMessage(MultiBarabasiAlbertPanel.class, "MultiBarabasiAlbertPanel.MField.text")); // NOI18N
        MField.setAutoscrolls(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NLabel)
                                    .addComponent(m0Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(m0Field, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                    .addComponent(NField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)))
                            .addComponent(MField, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(constraintsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m0Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m0Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(constraintsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTextField MField;
    private javax.swing.JLabel MLabel;
    protected javax.swing.JTextField NField;
    private javax.swing.JLabel NLabel;
    private javax.swing.JLabel constraintsLabel;
    protected javax.swing.JTextField m0Field;
    private javax.swing.JLabel m0Label;
    // End of variables declaration//GEN-END:variables

}
