/*
 * Copyright 2008-2010 Gephi
 * Authors : Cezary Bartosiak
 * Website : http://www.gephi.org
 *
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.ui.complexgenerator.plugin;

import java.util.ArrayList;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.io.generator.spi.Generator;
import org.gephi.io.generator.spi.GeneratorUI;
import org.netbeans.validation.api.ui.ValidationPanel;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Lookup;

/**
 *
 *
 * @author Cezary Bartosiak
 */
public class MultiGeneratorPanel extends javax.swing.JPanel {
	private ComboBoxModel allGeneratorsModel;
	private DefaultListModel chosenGeneratorsModel;

    /** Creates new form MultiGeneratorPanel */
    public MultiGeneratorPanel() {
		Generator[] allGenerators = Lookup.getDefault().lookupAll(Generator.class).toArray(new Generator[0]);
		List<CGenerator> cgenerators = new ArrayList<CGenerator>();
		for (Generator generator : allGenerators)
			if (!generator.getName().equals("Multi Generator"))
				cgenerators.add(new CGenerator(generator));
		allGeneratorsModel = new DefaultComboBoxModel(cgenerators.toArray());
		allGeneratorsModel.setSelectedItem(cgenerators.get(0));
		chosenGeneratorsModel = new DefaultListModel();

		initComponents();
    }

	public List<Generator> getChosenGenerators() {
		List<Generator> chosenGenerators = new ArrayList<Generator>();
		for (int i = 0; i < chosenGeneratorsModel.size(); ++i) {
			Object item = chosenGeneratorsModel.elementAt(i);
			if (item instanceof CGenerator)
				chosenGenerators.add(((CGenerator)item).generator);
		}
		return chosenGenerators;
	}

	public void setChosenGenerators(List<Generator> chosenGenerators) {
		chosenGeneratorsModel.clear();
		for (Generator generator : chosenGenerators)
			chosenGeneratorsModel.addElement(new CGenerator(generator));

		if (chosenGeneratorsModel.size() > 0) {
			editSelectedButton.setEnabled(true);
			deleteSelectedButton.setEnabled(true);
		}
		else {
			editSelectedButton.setEnabled(false);
			deleteSelectedButton.setEnabled(false);
		}
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseGeneratorComboBox = new javax.swing.JComboBox();
        chooseGeneratorLabel = new javax.swing.JLabel();
        chosenGeneratorsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chosenGeneratorsList = new javax.swing.JList();
        editSelectedButton = new javax.swing.JButton();
        addGeneratorButton = new javax.swing.JButton();
        deleteSelectedButton = new javax.swing.JButton();

        chooseGeneratorComboBox.setModel(allGeneratorsModel);

        chooseGeneratorLabel.setText(org.openide.util.NbBundle.getMessage(MultiGeneratorPanel.class, "MultiGeneratorPanel.chooseGeneratorLabel.text")); // NOI18N

        chosenGeneratorsLabel.setText(org.openide.util.NbBundle.getMessage(MultiGeneratorPanel.class, "MultiGeneratorPanel.chosenGeneratorsLabel.text")); // NOI18N

        chosenGeneratorsList.setModel(chosenGeneratorsModel);
        jScrollPane1.setViewportView(chosenGeneratorsList);

        editSelectedButton.setText(org.openide.util.NbBundle.getMessage(MultiGeneratorPanel.class, "MultiGeneratorPanel.editSelectedButton.text")); // NOI18N
        editSelectedButton.setEnabled(false);
        editSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSelectedActionPerformed(evt);
            }
        });

        addGeneratorButton.setText(org.openide.util.NbBundle.getMessage(MultiGeneratorPanel.class, "MultiGeneratorPanel.addGeneratorButton.text")); // NOI18N
        addGeneratorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGeneratorActionPerformed(evt);
            }
        });

        deleteSelectedButton.setText(org.openide.util.NbBundle.getMessage(MultiGeneratorPanel.class, "MultiGeneratorPanel.deleteSelectedButton.text")); // NOI18N
        deleteSelectedButton.setEnabled(false);
        deleteSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(chooseGeneratorLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editSelectedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteSelectedButton))
                    .addComponent(addGeneratorButton)
                    .addComponent(chosenGeneratorsLabel)
                    .addComponent(chooseGeneratorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseGeneratorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseGeneratorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addGeneratorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chosenGeneratorsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editSelectedButton)
                    .addComponent(deleteSelectedButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void addGeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGeneratorActionPerformed
		chosenGeneratorsModel.addElement(allGeneratorsModel.getSelectedItem());
		editSelectedButton.setEnabled(true);
		deleteSelectedButton.setEnabled(true);
	}//GEN-LAST:event_addGeneratorActionPerformed

	private void editSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSelectedActionPerformed
		Generator generator = ((CGenerator)chosenGeneratorsList.getSelectedValue()).generator;
		GeneratorUI ui = generator.getUI();
		if (ui != null) {
			ui.setup(generator);
			JPanel panel = ui.getPanel();
			final DialogDescriptor dd = new DialogDescriptor(panel, generator.getName());
			if (panel instanceof ValidationPanel) {
				ValidationPanel vp = (ValidationPanel)panel;
				vp.addChangeListener(new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {
						dd.setValid(!((ValidationPanel)e.getSource()).isProblem());
					}
				});
			}
			Object result = DialogDisplayer.getDefault().notify(dd);
			if (result != NotifyDescriptor.OK_OPTION)
				return;
			ui.unsetup();
		}
	}//GEN-LAST:event_editSelectedActionPerformed

	private void deleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedActionPerformed
		chosenGeneratorsModel.removeElement(chosenGeneratorsList.getSelectedValue());

		if (chosenGeneratorsModel.size() > 0) {
			editSelectedButton.setEnabled(true);
			deleteSelectedButton.setEnabled(true);
		}
		else {
			editSelectedButton.setEnabled(false);
			deleteSelectedButton.setEnabled(false);
		}
	}//GEN-LAST:event_deleteSelectedActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGeneratorButton;
    private javax.swing.JComboBox chooseGeneratorComboBox;
    private javax.swing.JLabel chooseGeneratorLabel;
    private javax.swing.JLabel chosenGeneratorsLabel;
    private javax.swing.JList chosenGeneratorsList;
    private javax.swing.JButton deleteSelectedButton;
    private javax.swing.JButton editSelectedButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

	private class CGenerator {
		public Generator generator;

		public CGenerator(Generator generator) {
			this.generator = generator;
		}

		@Override
		public String toString() {
			return generator.getName();
		}
	}
}
