OpenIDE-Module-Display-Category=Plugin
OpenIDE-Module-Name=Complex Generator Plugin UI

BarabasiAlbertPanel.constraintsLabel.text=<html>\nN &gt; 0<br>\nm0 &gt; 0<br>\nm0 &lt; N<br>\nM &gt; 0<br>\nM &lt;= m0\n</html>
BarabasiAlbertPanel.NLabel.text=N \u2013 number of nodes in generated network:
BarabasiAlbertPanel.NField.text=
BarabasiAlbertPanel.m0Label.text=m0 \u2013 number of nodes at the start time:
BarabasiAlbertPanel.m0Field.text=
BarabasiAlbertPanel.MLabel.text=M \u2013 number of edges coming with every new node:
BarabasiAlbertPanel.MField.text=
BarabasiAlbertGeneralizedPanel.MLabel.text=M \u2013 number of edges to add, rewire or coming with a node in every step:
BarabasiAlbertGeneralizedPanel.NField.text=
BarabasiAlbertGeneralizedPanel.MField.text=
BarabasiAlbertGeneralizedPanel.NLabel.text=N \u2013 number of the algorithm's steps:
BarabasiAlbertGeneralizedPanel.m0Field.text=
BarabasiAlbertGeneralizedPanel.constraintsLabel.text=<html>\nN &gt; 0<br>\nm0 &gt; 0<br>\nM &gt; 0<br>\nM &lt;= m0<br>\n0 &lt;= p &lt; 1<br>\n0 &lt;= q &lt; 1 - p\n</html>
BarabasiAlbertGeneralizedPanel.m0Label.text=m0 \u2013 number of isolated nodes at the start time:
BarabasiAlbertGeneralizedPanel.pLabel.text=p \u2013 probability of adding new edges:
BarabasiAlbertGeneralizedPanel.pField.text=
BarabasiAlbertGeneralizedPanel.qLabel.text=q \u2013 probability of rewiring existing edges:
BarabasiAlbertGeneralizedPanel.qField.text=
BarabasiAlbertSimplifiedAPanel.MField.text=
BarabasiAlbertSimplifiedAPanel.m0Field.text=
BarabasiAlbertSimplifiedAPanel.NField.text=
BarabasiAlbertSimplifiedAPanel.m0Label.text=m0 \u2013 number of nodes at the start time:
BarabasiAlbertSimplifiedAPanel.NLabel.text=N \u2013 number of nodes in generated network:
BarabasiAlbertSimplifiedAPanel.constraintsLabel.text=<html>\nN &gt; 0<br>\nm0 &gt; 0<br>\nm0 &lt; N<br>\nM &gt; 0<br>\nM &lt;= m0\n</html>
BarabasiAlbertSimplifiedAPanel.MLabel.text=M \u2013 number of edges coming with every new node:
BarabasiAlbertSimplifiedBPanel.NField.text=
BarabasiAlbertSimplifiedBPanel.MField.text=
BarabasiAlbertSimplifiedBPanel.MLabel.text=M \u2013 number of edges in generated network:
BarabasiAlbertSimplifiedBPanel.constraintsLabel.text=<html>\nN &gt; 0<br>\nM &gt; 0<br>\nM &lt;= N * (N - 1) / 2<br>\n</html>
BarabasiAlbertSimplifiedBPanel.NLabel.text=N \u2013 number of nodes in generated network:
ErdosRenyiGnpPanel.constraintsLabel.text=<html>\nn &gt; 0<br>\n0 &lt;= p &lt;= 1<br>\n</html>
ErdosRenyiGnpPanel.nLabel.text=n \u2013 number of nodes in generated network:
ErdosRenyiGnpPanel.nField.text=
ErdosRenyiGnpPanel.pLabel.text=p \u2013 probability of edge existence between all pairs of nodes:
ErdosRenyiGnpPanel.pField.text=
ErdosRenyiGnmPanel.nField.text=
ErdosRenyiGnmPanel.constraintsLabel.text=<html>\nn &gt; 0<br>\nm &gt;= 0<br>\nm &lt;= n * (n - 1) / 2\n</html>
ErdosRenyiGnmPanel.nLabel.text=n \u2013 number of nodes in generated network:
ErdosRenyiGnmPanel.mLabel.text=m \u2013 number of edges in generated network:
ErdosRenyiGnmPanel.mField.text=
KleinbergPanel.constraintsLabel.text=<html>\nn &gt;= 2<br>\np &gt;= 1<br>\np &lt;= 2n - 2<br>\nq &gt;= 0<br>\nq &lt;= n^2 - p * (p + 3) / 2 - 1 for p &lt; n<br>\nq &lt;= (2n - p - 3) * (2n - p) / 2 + 1 for p &gt;= n<br>\nr &gt;= 0\n</html>
KleinbergPanel.nLabel.text=n \u2013 size of a lattice:
KleinbergPanel.nField.text=
KleinbergPanel.pLabel.text=p - lattice distance to local contacs:
KleinbergPanel.pField.text=
KleinbergPanel.qLabel.text=q - long-range contacs:
KleinbergPanel.qField.text=
KleinbergPanel.rLabel.text=r \u2013 clustering exponent:
KleinbergPanel.rField.text=
OpenIDE-Module-Short-Description=Scientific generators UI
WattsStrogatzBetaPanel.constraintsLabel.text=<html>\nN &gt; K &gt;= ln(N) &gt;= 1<br>\nK is even<br>\n0 &lt;= beta &lt;= 1\n</html>
WattsStrogatzBetaPanel.NField.text=
WattsStrogatzBetaPanel.NLabel.text=N \u2013 the desired number of nodes:
WattsStrogatzBetaPanel.KLabel.text=K \u2013 the number of edges connected to each node:
WattsStrogatzBetaPanel.KField.text=
WattsStrogatzBetaPanel.betaLabel.text=beta - the probability of an edge being rewired randomly:
WattsStrogatzBetaPanel.betaField.text=
WattsStrogatzAlphaPanel.constraintsLabel.text=<html>\nn &gt; k &gt; 0<br>\n0 &lt;= alpha\n</html>
WattsStrogatzAlphaPanel.nLabel.text=n \u2013 the desired number of nodes:
WattsStrogatzAlphaPanel.nField.text=
WattsStrogatzAlphaPanel.kLabel.text=k \u2013 the average degree of the graph:
WattsStrogatzAlphaPanel.kField.text=
WattsStrogatzAlphaPanel.alphaLabel.text=alpha - a tunable parameter:
WattsStrogatzAlphaPanel.alphaField.text=
BalancedTreePanel.constraintsLabel.text=<html>\nr &gt;= 2<br>\nh &gt;= 1\n</html>
BalancedTreePanel.rLabel.text=r - a degree of the root:
BalancedTreePanel.rField.text=
BalancedTreePanel.hLabel.text=h - a height of the tree:
BalancedTreePanel.hField.text=
KleinbergPanel.torusCheckBox.text=torus based
MultiGeneratorPanel.chooseGeneratorLabel.text=Choose generator:
MultiGeneratorPanel.addGeneratorButton.text=Add generator
MultiGeneratorPanel.chosenGeneratorsLabel.text=Chosen generators:
MultiGeneratorPanel.editSelectedButton.text=Edit selected generator
MultiGeneratorPanel.deleteSelectedButton.text=Delete selected generator
BarabasiAlbertPanel.existingCheckBox.text=Consider existing nodes
MultiBarabasiAlbertPanel.NLabel.text=N \u2013 number of nodes in generated network:
MultiBarabasiAlbertPanel.NField.text=
MultiBarabasiAlbertPanel.m0Label.text=m0 \u2013 number of nodes at the start time:
MultiBarabasiAlbertPanel.m0Field.text=
MultiBarabasiAlbertPanel.constraintsLabel.text=<html>\nN &gt; 0<br>\nm0 &gt; 0<br>\nm0 &lt; N<br>\nMi &gt; 0<br>\nMi &lt;= m0\n</html>
MultiBarabasiAlbertPanel.MLabel.text=M \u2013 number of edges coming with every new node:
MultiBarabasiAlbertPanel.MField.text=
